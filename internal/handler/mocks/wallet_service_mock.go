// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	decimal "github.com/shopspring/decimal"

	mock "github.com/stretchr/testify/mock"

	model "github.com/kylenguyen/wallet-app/internal/model"
)

// WalletServiceMock is an autogenerated mock type for the WalletService type
type WalletServiceMock struct {
	mock.Mock
}

type WalletServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *WalletServiceMock) EXPECT() *WalletServiceMock_Expecter {
	return &WalletServiceMock_Expecter{mock: &_m.Mock}
}

// Deposit provides a mock function with given fields: ctx, userId, walletId, amount
func (_m *WalletServiceMock) Deposit(ctx context.Context, userId string, walletId string, amount decimal.Decimal) (*model.Transaction, error) {
	ret := _m.Called(ctx, userId, walletId, amount)

	if len(ret) == 0 {
		panic("no return value specified for Deposit")
	}

	var r0 *model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, decimal.Decimal) (*model.Transaction, error)); ok {
		return rf(ctx, userId, walletId, amount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, decimal.Decimal) *model.Transaction); ok {
		r0 = rf(ctx, userId, walletId, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, decimal.Decimal) error); ok {
		r1 = rf(ctx, userId, walletId, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WalletServiceMock_Deposit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deposit'
type WalletServiceMock_Deposit_Call struct {
	*mock.Call
}

// Deposit is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - walletId string
//   - amount decimal.Decimal
func (_e *WalletServiceMock_Expecter) Deposit(ctx interface{}, userId interface{}, walletId interface{}, amount interface{}) *WalletServiceMock_Deposit_Call {
	return &WalletServiceMock_Deposit_Call{Call: _e.mock.On("Deposit", ctx, userId, walletId, amount)}
}

func (_c *WalletServiceMock_Deposit_Call) Run(run func(ctx context.Context, userId string, walletId string, amount decimal.Decimal)) *WalletServiceMock_Deposit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(decimal.Decimal))
	})
	return _c
}

func (_c *WalletServiceMock_Deposit_Call) Return(_a0 *model.Transaction, _a1 error) *WalletServiceMock_Deposit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WalletServiceMock_Deposit_Call) RunAndReturn(run func(context.Context, string, string, decimal.Decimal) (*model.Transaction, error)) *WalletServiceMock_Deposit_Call {
	_c.Call.Return(run)
	return _c
}

// GetWalletInfo provides a mock function with given fields: ctx, userId, walletId
func (_m *WalletServiceMock) GetWalletInfo(ctx context.Context, userId string, walletId string) (*model.Wallet, error) {
	ret := _m.Called(ctx, userId, walletId)

	if len(ret) == 0 {
		panic("no return value specified for GetWalletInfo")
	}

	var r0 *model.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.Wallet, error)); ok {
		return rf(ctx, userId, walletId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Wallet); ok {
		r0 = rf(ctx, userId, walletId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wallet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userId, walletId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WalletServiceMock_GetWalletInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWalletInfo'
type WalletServiceMock_GetWalletInfo_Call struct {
	*mock.Call
}

// GetWalletInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - walletId string
func (_e *WalletServiceMock_Expecter) GetWalletInfo(ctx interface{}, userId interface{}, walletId interface{}) *WalletServiceMock_GetWalletInfo_Call {
	return &WalletServiceMock_GetWalletInfo_Call{Call: _e.mock.On("GetWalletInfo", ctx, userId, walletId)}
}

func (_c *WalletServiceMock_GetWalletInfo_Call) Run(run func(ctx context.Context, userId string, walletId string)) *WalletServiceMock_GetWalletInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *WalletServiceMock_GetWalletInfo_Call) Return(_a0 *model.Wallet, _a1 error) *WalletServiceMock_GetWalletInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WalletServiceMock_GetWalletInfo_Call) RunAndReturn(run func(context.Context, string, string) (*model.Wallet, error)) *WalletServiceMock_GetWalletInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetWalletTransactionsByWalletID provides a mock function with given fields: ctx, userId, walletId
func (_m *WalletServiceMock) GetWalletTransactionsByWalletID(ctx context.Context, userId string, walletId string) ([]model.Transaction, error) {
	ret := _m.Called(ctx, userId, walletId)

	if len(ret) == 0 {
		panic("no return value specified for GetWalletTransactionsByWalletID")
	}

	var r0 []model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]model.Transaction, error)); ok {
		return rf(ctx, userId, walletId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []model.Transaction); ok {
		r0 = rf(ctx, userId, walletId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userId, walletId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WalletServiceMock_GetWalletTransactionsByWalletID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWalletTransactionsByWalletID'
type WalletServiceMock_GetWalletTransactionsByWalletID_Call struct {
	*mock.Call
}

// GetWalletTransactionsByWalletID is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - walletId string
func (_e *WalletServiceMock_Expecter) GetWalletTransactionsByWalletID(ctx interface{}, userId interface{}, walletId interface{}) *WalletServiceMock_GetWalletTransactionsByWalletID_Call {
	return &WalletServiceMock_GetWalletTransactionsByWalletID_Call{Call: _e.mock.On("GetWalletTransactionsByWalletID", ctx, userId, walletId)}
}

func (_c *WalletServiceMock_GetWalletTransactionsByWalletID_Call) Run(run func(ctx context.Context, userId string, walletId string)) *WalletServiceMock_GetWalletTransactionsByWalletID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *WalletServiceMock_GetWalletTransactionsByWalletID_Call) Return(_a0 []model.Transaction, _a1 error) *WalletServiceMock_GetWalletTransactionsByWalletID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WalletServiceMock_GetWalletTransactionsByWalletID_Call) RunAndReturn(run func(context.Context, string, string) ([]model.Transaction, error)) *WalletServiceMock_GetWalletTransactionsByWalletID_Call {
	_c.Call.Return(run)
	return _c
}

// Transfer provides a mock function with given fields: ctx, sourceUserId, sourceWalletId, destinationWalletId, amount
func (_m *WalletServiceMock) Transfer(ctx context.Context, sourceUserId string, sourceWalletId string, destinationWalletId string, amount decimal.Decimal) (*model.Transaction, error) {
	ret := _m.Called(ctx, sourceUserId, sourceWalletId, destinationWalletId, amount)

	if len(ret) == 0 {
		panic("no return value specified for Transfer")
	}

	var r0 *model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, decimal.Decimal) (*model.Transaction, error)); ok {
		return rf(ctx, sourceUserId, sourceWalletId, destinationWalletId, amount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, decimal.Decimal) *model.Transaction); ok {
		r0 = rf(ctx, sourceUserId, sourceWalletId, destinationWalletId, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, decimal.Decimal) error); ok {
		r1 = rf(ctx, sourceUserId, sourceWalletId, destinationWalletId, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WalletServiceMock_Transfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transfer'
type WalletServiceMock_Transfer_Call struct {
	*mock.Call
}

// Transfer is a helper method to define mock.On call
//   - ctx context.Context
//   - sourceUserId string
//   - sourceWalletId string
//   - destinationWalletId string
//   - amount decimal.Decimal
func (_e *WalletServiceMock_Expecter) Transfer(ctx interface{}, sourceUserId interface{}, sourceWalletId interface{}, destinationWalletId interface{}, amount interface{}) *WalletServiceMock_Transfer_Call {
	return &WalletServiceMock_Transfer_Call{Call: _e.mock.On("Transfer", ctx, sourceUserId, sourceWalletId, destinationWalletId, amount)}
}

func (_c *WalletServiceMock_Transfer_Call) Run(run func(ctx context.Context, sourceUserId string, sourceWalletId string, destinationWalletId string, amount decimal.Decimal)) *WalletServiceMock_Transfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(decimal.Decimal))
	})
	return _c
}

func (_c *WalletServiceMock_Transfer_Call) Return(_a0 *model.Transaction, _a1 error) *WalletServiceMock_Transfer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WalletServiceMock_Transfer_Call) RunAndReturn(run func(context.Context, string, string, string, decimal.Decimal) (*model.Transaction, error)) *WalletServiceMock_Transfer_Call {
	_c.Call.Return(run)
	return _c
}

// Withdraw provides a mock function with given fields: ctx, userId, walletId, amount
func (_m *WalletServiceMock) Withdraw(ctx context.Context, userId string, walletId string, amount decimal.Decimal) (*model.Transaction, error) {
	ret := _m.Called(ctx, userId, walletId, amount)

	if len(ret) == 0 {
		panic("no return value specified for Withdraw")
	}

	var r0 *model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, decimal.Decimal) (*model.Transaction, error)); ok {
		return rf(ctx, userId, walletId, amount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, decimal.Decimal) *model.Transaction); ok {
		r0 = rf(ctx, userId, walletId, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, decimal.Decimal) error); ok {
		r1 = rf(ctx, userId, walletId, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WalletServiceMock_Withdraw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Withdraw'
type WalletServiceMock_Withdraw_Call struct {
	*mock.Call
}

// Withdraw is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - walletId string
//   - amount decimal.Decimal
func (_e *WalletServiceMock_Expecter) Withdraw(ctx interface{}, userId interface{}, walletId interface{}, amount interface{}) *WalletServiceMock_Withdraw_Call {
	return &WalletServiceMock_Withdraw_Call{Call: _e.mock.On("Withdraw", ctx, userId, walletId, amount)}
}

func (_c *WalletServiceMock_Withdraw_Call) Run(run func(ctx context.Context, userId string, walletId string, amount decimal.Decimal)) *WalletServiceMock_Withdraw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(decimal.Decimal))
	})
	return _c
}

func (_c *WalletServiceMock_Withdraw_Call) Return(_a0 *model.Transaction, _a1 error) *WalletServiceMock_Withdraw_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WalletServiceMock_Withdraw_Call) RunAndReturn(run func(context.Context, string, string, decimal.Decimal) (*model.Transaction, error)) *WalletServiceMock_Withdraw_Call {
	_c.Call.Return(run)
	return _c
}

// NewWalletServiceMock creates a new instance of WalletServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWalletServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *WalletServiceMock {
	mock := &WalletServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
