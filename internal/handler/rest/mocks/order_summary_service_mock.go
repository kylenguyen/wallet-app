// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "bitbucket.org/ntuclink/ff-order-history-go/internal/model"

	time "time"
)

// OrderSummaryServiceMock is an autogenerated mock type for the OrderSummaryService type
type OrderSummaryServiceMock struct {
	mock.Mock
}

type OrderSummaryServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderSummaryServiceMock) EXPECT() *OrderSummaryServiceMock_Expecter {
	return &OrderSummaryServiceMock_Expecter{mock: &_m.Mock}
}

// GetCustomerMonthlySummaries provides a mock function with given fields: ctx, customerID, orderType, excludeStatus, months
func (_m *OrderSummaryServiceMock) GetCustomerMonthlySummaries(ctx context.Context, customerID int, orderType []string, excludeStatus []string, months int) ([]model.CustomerMonthlyOrderSummary, error) {
	ret := _m.Called(ctx, customerID, orderType, excludeStatus, months)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerMonthlySummaries")
	}

	var r0 []model.CustomerMonthlyOrderSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, []string, []string, int) ([]model.CustomerMonthlyOrderSummary, error)); ok {
		return rf(ctx, customerID, orderType, excludeStatus, months)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, []string, []string, int) []model.CustomerMonthlyOrderSummary); ok {
		r0 = rf(ctx, customerID, orderType, excludeStatus, months)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CustomerMonthlyOrderSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, []string, []string, int) error); ok {
		r1 = rf(ctx, customerID, orderType, excludeStatus, months)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderSummaryServiceMock_GetCustomerMonthlySummaries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomerMonthlySummaries'
type OrderSummaryServiceMock_GetCustomerMonthlySummaries_Call struct {
	*mock.Call
}

// GetCustomerMonthlySummaries is a helper method to define mock.On call
//   - ctx context.Context
//   - customerID int
//   - orderType []string
//   - excludeStatus []string
//   - months int
func (_e *OrderSummaryServiceMock_Expecter) GetCustomerMonthlySummaries(ctx interface{}, customerID interface{}, orderType interface{}, excludeStatus interface{}, months interface{}) *OrderSummaryServiceMock_GetCustomerMonthlySummaries_Call {
	return &OrderSummaryServiceMock_GetCustomerMonthlySummaries_Call{Call: _e.mock.On("GetCustomerMonthlySummaries", ctx, customerID, orderType, excludeStatus, months)}
}

func (_c *OrderSummaryServiceMock_GetCustomerMonthlySummaries_Call) Run(run func(ctx context.Context, customerID int, orderType []string, excludeStatus []string, months int)) *OrderSummaryServiceMock_GetCustomerMonthlySummaries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].([]string), args[3].([]string), args[4].(int))
	})
	return _c
}

func (_c *OrderSummaryServiceMock_GetCustomerMonthlySummaries_Call) Return(_a0 []model.CustomerMonthlyOrderSummary, _a1 error) *OrderSummaryServiceMock_GetCustomerMonthlySummaries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderSummaryServiceMock_GetCustomerMonthlySummaries_Call) RunAndReturn(run func(context.Context, int, []string, []string, int) ([]model.CustomerMonthlyOrderSummary, error)) *OrderSummaryServiceMock_GetCustomerMonthlySummaries_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomerTotalSummary provides a mock function with given fields: ctx, customerID, orderType, excludeStatus
func (_m *OrderSummaryServiceMock) GetCustomerTotalSummary(ctx context.Context, customerID int, orderType []string, excludeStatus []string) (*model.CustomerOrderSummary, error) {
	ret := _m.Called(ctx, customerID, orderType, excludeStatus)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerTotalSummary")
	}

	var r0 *model.CustomerOrderSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, []string, []string) (*model.CustomerOrderSummary, error)); ok {
		return rf(ctx, customerID, orderType, excludeStatus)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, []string, []string) *model.CustomerOrderSummary); ok {
		r0 = rf(ctx, customerID, orderType, excludeStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CustomerOrderSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, []string, []string) error); ok {
		r1 = rf(ctx, customerID, orderType, excludeStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderSummaryServiceMock_GetCustomerTotalSummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomerTotalSummary'
type OrderSummaryServiceMock_GetCustomerTotalSummary_Call struct {
	*mock.Call
}

// GetCustomerTotalSummary is a helper method to define mock.On call
//   - ctx context.Context
//   - customerID int
//   - orderType []string
//   - excludeStatus []string
func (_e *OrderSummaryServiceMock_Expecter) GetCustomerTotalSummary(ctx interface{}, customerID interface{}, orderType interface{}, excludeStatus interface{}) *OrderSummaryServiceMock_GetCustomerTotalSummary_Call {
	return &OrderSummaryServiceMock_GetCustomerTotalSummary_Call{Call: _e.mock.On("GetCustomerTotalSummary", ctx, customerID, orderType, excludeStatus)}
}

func (_c *OrderSummaryServiceMock_GetCustomerTotalSummary_Call) Run(run func(ctx context.Context, customerID int, orderType []string, excludeStatus []string)) *OrderSummaryServiceMock_GetCustomerTotalSummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].([]string), args[3].([]string))
	})
	return _c
}

func (_c *OrderSummaryServiceMock_GetCustomerTotalSummary_Call) Return(_a0 *model.CustomerOrderSummary, _a1 error) *OrderSummaryServiceMock_GetCustomerTotalSummary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderSummaryServiceMock_GetCustomerTotalSummary_Call) RunAndReturn(run func(context.Context, int, []string, []string) (*model.CustomerOrderSummary, error)) *OrderSummaryServiceMock_GetCustomerTotalSummary_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastOrderDate provides a mock function with given fields: ctx, customerID, orderType
func (_m *OrderSummaryServiceMock) GetLastOrderDate(ctx context.Context, customerID int, orderType []string) (*time.Time, error) {
	ret := _m.Called(ctx, customerID, orderType)

	if len(ret) == 0 {
		panic("no return value specified for GetLastOrderDate")
	}

	var r0 *time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, []string) (*time.Time, error)); ok {
		return rf(ctx, customerID, orderType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, []string) *time.Time); ok {
		r0 = rf(ctx, customerID, orderType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, []string) error); ok {
		r1 = rf(ctx, customerID, orderType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderSummaryServiceMock_GetLastOrderDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastOrderDate'
type OrderSummaryServiceMock_GetLastOrderDate_Call struct {
	*mock.Call
}

// GetLastOrderDate is a helper method to define mock.On call
//   - ctx context.Context
//   - customerID int
//   - orderType []string
func (_e *OrderSummaryServiceMock_Expecter) GetLastOrderDate(ctx interface{}, customerID interface{}, orderType interface{}) *OrderSummaryServiceMock_GetLastOrderDate_Call {
	return &OrderSummaryServiceMock_GetLastOrderDate_Call{Call: _e.mock.On("GetLastOrderDate", ctx, customerID, orderType)}
}

func (_c *OrderSummaryServiceMock_GetLastOrderDate_Call) Run(run func(ctx context.Context, customerID int, orderType []string)) *OrderSummaryServiceMock_GetLastOrderDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].([]string))
	})
	return _c
}

func (_c *OrderSummaryServiceMock_GetLastOrderDate_Call) Return(_a0 *time.Time, _a1 error) *OrderSummaryServiceMock_GetLastOrderDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderSummaryServiceMock_GetLastOrderDate_Call) RunAndReturn(run func(context.Context, int, []string) (*time.Time, error)) *OrderSummaryServiceMock_GetLastOrderDate_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderSummaryServiceMock creates a new instance of OrderSummaryServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderSummaryServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderSummaryServiceMock {
	mock := &OrderSummaryServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
