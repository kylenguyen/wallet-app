// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "bitbucket.org/ntuclink/ff-order-history-go/internal/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// CustomerOrderSummaryGetterMock is an autogenerated mock type for the CustomerOrderSummaryGetter type
type CustomerOrderSummaryGetterMock struct {
	mock.Mock
}

type CustomerOrderSummaryGetterMock_Expecter struct {
	mock *mock.Mock
}

func (_m *CustomerOrderSummaryGetterMock) EXPECT() *CustomerOrderSummaryGetterMock_Expecter {
	return &CustomerOrderSummaryGetterMock_Expecter{mock: &_m.Mock}
}

// Calculate provides a mock function with given fields: ctx, customerID, criteria
func (_m *CustomerOrderSummaryGetterMock) Calculate(ctx context.Context, customerID int, criteria model.CustomerOrderSummaryGetCriteria) (*model.CustomerOrderSummary, error) {
	ret := _m.Called(ctx, customerID, criteria)

	if len(ret) == 0 {
		panic("no return value specified for Calculate")
	}

	var r0 *model.CustomerOrderSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, model.CustomerOrderSummaryGetCriteria) (*model.CustomerOrderSummary, error)); ok {
		return rf(ctx, customerID, criteria)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, model.CustomerOrderSummaryGetCriteria) *model.CustomerOrderSummary); ok {
		r0 = rf(ctx, customerID, criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CustomerOrderSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, model.CustomerOrderSummaryGetCriteria) error); ok {
		r1 = rf(ctx, customerID, criteria)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerOrderSummaryGetterMock_Calculate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Calculate'
type CustomerOrderSummaryGetterMock_Calculate_Call struct {
	*mock.Call
}

// Calculate is a helper method to define mock.On call
//   - ctx context.Context
//   - customerID int
//   - criteria model.CustomerOrderSummaryGetCriteria
func (_e *CustomerOrderSummaryGetterMock_Expecter) Calculate(ctx interface{}, customerID interface{}, criteria interface{}) *CustomerOrderSummaryGetterMock_Calculate_Call {
	return &CustomerOrderSummaryGetterMock_Calculate_Call{Call: _e.mock.On("Calculate", ctx, customerID, criteria)}
}

func (_c *CustomerOrderSummaryGetterMock_Calculate_Call) Run(run func(ctx context.Context, customerID int, criteria model.CustomerOrderSummaryGetCriteria)) *CustomerOrderSummaryGetterMock_Calculate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(model.CustomerOrderSummaryGetCriteria))
	})
	return _c
}

func (_c *CustomerOrderSummaryGetterMock_Calculate_Call) Return(_a0 *model.CustomerOrderSummary, _a1 error) *CustomerOrderSummaryGetterMock_Calculate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomerOrderSummaryGetterMock_Calculate_Call) RunAndReturn(run func(context.Context, int, model.CustomerOrderSummaryGetCriteria) (*model.CustomerOrderSummary, error)) *CustomerOrderSummaryGetterMock_Calculate_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastOrderDate provides a mock function with given fields: ctx, customerID, criteria
func (_m *CustomerOrderSummaryGetterMock) GetLastOrderDate(ctx context.Context, customerID int, criteria model.CustomerOrderSummaryGetCriteria) (*time.Time, error) {
	ret := _m.Called(ctx, customerID, criteria)

	if len(ret) == 0 {
		panic("no return value specified for GetLastOrderDate")
	}

	var r0 *time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, model.CustomerOrderSummaryGetCriteria) (*time.Time, error)); ok {
		return rf(ctx, customerID, criteria)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, model.CustomerOrderSummaryGetCriteria) *time.Time); ok {
		r0 = rf(ctx, customerID, criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, model.CustomerOrderSummaryGetCriteria) error); ok {
		r1 = rf(ctx, customerID, criteria)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerOrderSummaryGetterMock_GetLastOrderDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastOrderDate'
type CustomerOrderSummaryGetterMock_GetLastOrderDate_Call struct {
	*mock.Call
}

// GetLastOrderDate is a helper method to define mock.On call
//   - ctx context.Context
//   - customerID int
//   - criteria model.CustomerOrderSummaryGetCriteria
func (_e *CustomerOrderSummaryGetterMock_Expecter) GetLastOrderDate(ctx interface{}, customerID interface{}, criteria interface{}) *CustomerOrderSummaryGetterMock_GetLastOrderDate_Call {
	return &CustomerOrderSummaryGetterMock_GetLastOrderDate_Call{Call: _e.mock.On("GetLastOrderDate", ctx, customerID, criteria)}
}

func (_c *CustomerOrderSummaryGetterMock_GetLastOrderDate_Call) Run(run func(ctx context.Context, customerID int, criteria model.CustomerOrderSummaryGetCriteria)) *CustomerOrderSummaryGetterMock_GetLastOrderDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(model.CustomerOrderSummaryGetCriteria))
	})
	return _c
}

func (_c *CustomerOrderSummaryGetterMock_GetLastOrderDate_Call) Return(_a0 *time.Time, _a1 error) *CustomerOrderSummaryGetterMock_GetLastOrderDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomerOrderSummaryGetterMock_GetLastOrderDate_Call) RunAndReturn(run func(context.Context, int, model.CustomerOrderSummaryGetCriteria) (*time.Time, error)) *CustomerOrderSummaryGetterMock_GetLastOrderDate_Call {
	_c.Call.Return(run)
	return _c
}

// NewCustomerOrderSummaryGetterMock creates a new instance of CustomerOrderSummaryGetterMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomerOrderSummaryGetterMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *CustomerOrderSummaryGetterMock {
	mock := &CustomerOrderSummaryGetterMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
