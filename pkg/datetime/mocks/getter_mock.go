// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// GetterMock is an autogenerated mock type for the Getter type
type GetterMock struct {
	mock.Mock
}

type GetterMock_Expecter struct {
	mock *mock.Mock
}

func (_m *GetterMock) EXPECT() *GetterMock_Expecter {
	return &GetterMock_Expecter{mock: &_m.Mock}
}

// GetLastDayOfMonth provides a mock function with given fields: t
func (_m *GetterMock) GetLastDayOfMonth(t time.Time) int {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for GetLastDayOfMonth")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(time.Time) int); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetterMock_GetLastDayOfMonth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastDayOfMonth'
type GetterMock_GetLastDayOfMonth_Call struct {
	*mock.Call
}

// GetLastDayOfMonth is a helper method to define mock.On call
//   - t time.Time
func (_e *GetterMock_Expecter) GetLastDayOfMonth(t interface{}) *GetterMock_GetLastDayOfMonth_Call {
	return &GetterMock_GetLastDayOfMonth_Call{Call: _e.mock.On("GetLastDayOfMonth", t)}
}

func (_c *GetterMock_GetLastDayOfMonth_Call) Run(run func(t time.Time)) *GetterMock_GetLastDayOfMonth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *GetterMock_GetLastDayOfMonth_Call) Return(_a0 int) *GetterMock_GetLastDayOfMonth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GetterMock_GetLastDayOfMonth_Call) RunAndReturn(run func(time.Time) int) *GetterMock_GetLastDayOfMonth_Call {
	_c.Call.Return(run)
	return _c
}

// GetMonthStartAndEnd provides a mock function with given fields: monthOffset
func (_m *GetterMock) GetMonthStartAndEnd(monthOffset int) (time.Time, time.Time) {
	ret := _m.Called(monthOffset)

	if len(ret) == 0 {
		panic("no return value specified for GetMonthStartAndEnd")
	}

	var r0 time.Time
	var r1 time.Time
	if rf, ok := ret.Get(0).(func(int) (time.Time, time.Time)); ok {
		return rf(monthOffset)
	}
	if rf, ok := ret.Get(0).(func(int) time.Time); ok {
		r0 = rf(monthOffset)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(int) time.Time); ok {
		r1 = rf(monthOffset)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	return r0, r1
}

// GetterMock_GetMonthStartAndEnd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMonthStartAndEnd'
type GetterMock_GetMonthStartAndEnd_Call struct {
	*mock.Call
}

// GetMonthStartAndEnd is a helper method to define mock.On call
//   - monthOffset int
func (_e *GetterMock_Expecter) GetMonthStartAndEnd(monthOffset interface{}) *GetterMock_GetMonthStartAndEnd_Call {
	return &GetterMock_GetMonthStartAndEnd_Call{Call: _e.mock.On("GetMonthStartAndEnd", monthOffset)}
}

func (_c *GetterMock_GetMonthStartAndEnd_Call) Run(run func(monthOffset int)) *GetterMock_GetMonthStartAndEnd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *GetterMock_GetMonthStartAndEnd_Call) Return(start time.Time, end time.Time) *GetterMock_GetMonthStartAndEnd_Call {
	_c.Call.Return(start, end)
	return _c
}

func (_c *GetterMock_GetMonthStartAndEnd_Call) RunAndReturn(run func(int) (time.Time, time.Time)) *GetterMock_GetMonthStartAndEnd_Call {
	_c.Call.Return(run)
	return _c
}

// NewGetterMock creates a new instance of GetterMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGetterMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *GetterMock {
	mock := &GetterMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
